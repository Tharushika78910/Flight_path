SELECT ident, name
FROM airport
WHERE continent = 'EU'
AND type='large_airport'
ORDER by name asc
LIMIT 30;

iso_country, ident, name, type, latitude_deg, longitude_deg, continent

INSERT INTO player (player_id, screen_name, start_loc, end_loc) VALUES (%s, %s, %s, %s);

create table airport_groups
  (
      group_id int auto_increment primary key,
      start_loc varchar(10) not null,
      loc1 varchar(10) not null,
      loc2 varchar(10) not null,
      loc3 varchar(10) not null,
      loc4 varchar(10) not null,
      end_loc varchar(10) not null
  )
   charset = latin1;

INSERT INTO airport_groups (group_id, start_loc, loc1, loc2, loc3, loc4, end_loc) VALUES (1, 'LEMD', 'LEAL', 'EHAM','LGAV','EGAA','LYBE');
INSERT INTO airport_groups (group_id, start_loc, loc1, loc2, loc3, loc4, end_loc) VALUES (2, 'ENBR', 'EDDB', 'EKBI','EGBB','LIPE','LFBD');
INSERT INTO airport_groups (group_id, start_loc, loc1, loc2, loc3, loc4, end_loc) VALUES (3, 'UKBB', 'EBBR', 'LHBP','LBBG','LIEE','LICC');
INSERT INTO airport_groups (group_id, start_loc, loc1, loc2, loc3, loc4, end_loc) VALUES (4, 'GCRR', 'LFPG', 'EDDK','EKCH','UUDD','EIDW');
INSERT INTO airport_groups (group_id, start_loc, loc1, loc2, loc3, loc4, end_loc) VALUES (5, 'EDDL', 'EGPH', 'EHEH','LFSB','LICJ','LPFR');


******************************************************************

- game start
    - Tell the player what the game is about
    - Ask for the players name
    - Insert new player to the database(player_id)
    - insert the goals to the database

- Game loop (while)
    - Ask the player, what they would like to do, by giving options
    - if something happens during the flight, add it here
    - update database tables based on user's choice
    - check if the game needs to end

- game over
    -display points, ranking

CREATE DATABASE airplane_simulator;

USE airplane_simulator;

CREATE TABLE player (
    id INT AUTO_INCREMENT PRIMARY KEY,
    screen_name VARCHAR(50),
    current_airport VARCHAR(50),
    destination_airport VARCHAR(50),
    fuel FLOAT,
    money FLOAT,
    cargo_collected INT
);

CREATE TABLE new_airports (
    airport_id INT AUTO_INCREMENT PRIMARY KEY,
    airport_code VARCHAR(40),
    airport_name VARCHAR(40) UNIQUE,
    has_fuel_leak BOOLEAN DEFAULT FALSE
);

INSERT INTO new_airports (airport_code, airport_name) VALUES ('LEMD', 'Adolfo Suárez Madrid–Barajas Airport');

INSERT INTO player (screen_name, current_airport, destination_airport, fuel, money, cargo_collected)
VALUES ('player1', 'LEMD', 'GCRR', 1000.0, 2000.0, 0);

//-- Update player data when fuel is consumed or cargo is collected

UPDATE player
SET current_airport = '____', fuel = 75.0, money = 800.0, cargo_collected = 1
WHERE screen_name = 'player1';

UPDATE new_airports
SET has_fuel_leak = TRUE
WHERE airport_id IN (3, 5, 12, 18, 27);

-------------------------------------------------

class Airplane:
    def __init__(self, start_airport, destination_airport, initial_fuel=100, money=1000):
        self.current_airport = start_airport
        self.destination_airport = destination_airport
        self.fuel = initial_fuel
        self.money = money
        self.cargo_collected = 0
        self.fuel_leak = False

    def fly_to(self, next_airport):
        distance = random.randint(10, 50)  # Random distance in km (you can improve this with actual distances)
        fuel_needed = distance * 0.5  # Fuel consumption per km (adjust as needed)

        # Check if next airport has a fuel leak
        if next_airport in fuel_leak_airports:
            self.fuel_leak = True
            fuel_needed *= 1.5  # Increase fuel consumption by 50%
            print(f"Warning: Fuel leak at {next_airport}! Fuel consumption is higher.")
        else:
            self.fuel_leak = False

        if self.fuel >= fuel_needed:
            self.fuel -= fuel_needed
            self.current_airport = next_airport
            print(f"Flew to {next_airport}. Fuel remaining: {self.fuel:.2f}")
        else:
            print("Not enough fuel to fly to the next airport!")
            return False

        return True

    def buy_fuel(self, amount):
        fuel_cost = 2  # Assume 2 money units per unit of fuel
        cost = amount * fuel_cost
        if self.money >= cost:
            self.money -= cost
            self.fuel += amount
            print(f"Bought {amount} fuel for {cost} money units. Fuel now: {self.fuel}, Money left: {self.money}")
        else:
            print("Not enough money to buy fuel!")

    def collect_cargo(self):
        self.cargo_collected += 1
        print(f"Cargo collected. Total cargo: {self.cargo_collected}")

    def status(self):
        print(f"Current airport: {self.current_airport}, Destination: {self.destination_airport}")
        print(f"Fuel: {self.fuel}, Money: {self.money}, Cargo: {self.cargo_collected}")

def start_flight(username, airplane):
    while True:
        print("\nChoose an action:")
        print("1. Fly to next airport")
        print("2. Buy fuel")
        print("3. Collect cargo")
        print("4. Check status")
        print("5. Quit")

        choice = input("Enter your choice: ")

        if choice == "1":
            # Choose next airport (you can implement more intelligent selection based on map/distance)
            next_airport = random.choice([airport for airport in airports if airport != airplane.current_airport])
            if airplane.fly_to(next_airport):
                if airplane.current_airport == airplane.destination_airport:
                    print(f"Congratulations! You've reached {airplane.destination_airport} and completed the flight!")
                    break
        elif choice == "2":
            amount = int(input("Enter amount of fuel to buy: "))
            airplane.buy_fuel(amount)
        elif choice == "3":
            airplane.collect_cargo()
        elif choice == "4":
            airplane.status()
        elif choice == "5":
            print("Quitting the game...")
            break
        else:
            print("Invalid choice!")

    # Save player progress after the game ends
    save_player_data(username, airplane)

def save_player_data(username, airplane):
    conn = connect_to_db()
    cursor = conn.cursor()
    update_query = """
    UPDATE player_status
    SET current_airport = %s, fuel = %s, money = %s, cargo_collected = %s
    WHERE username = %s
    """
    data = (airplane.current_airport, airplane.fuel, airplane.money, airplane.cargo_collected, username)
    cursor.execute(update_query, data)
    conn.commit()
    cursor.close()
    conn.close()

# Example usage:
username = "pilot1"
start_airport = random.choice(airports)
destination_airport = random.choice([airport for airport in airports if airport != start_airport])

airplane = Airplane(start_airport, destination_airport)
start_flight(username, airplane)

-------------------------------------------------------------------

def load_player_data(username):

        print(f"Welcome, {username}! Starting a new flight.")
        start_airport = random.choice(airports)
        destination_airport = random.choice([airport for airport in airports if airport != start_airport])
        airplane = Airplane(start_airport, destination_airport)

    return airplane

# Example:
username = input("Enter your username: ")
airplane = load_player_data(username)
start_flight(username, airplane)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

def get_airport_codes():
    conn = connect_to_db()
    cursor = conn.cursor()

    # Query to get the airport_code column from your table
    query = "SELECT airport_code FROM airports"
    cursor.execute(query)

    # Fetch all results and store in the airports list
    airports = [row[0] for row in cursor.fetchall()]

    cursor.close()
    conn.close()

    return airports

# Usage example
airports = get_airport_codes()
print(airports)


{def get_airports():
    sql = """SELECT ident, name
                FROM airport
                WHERE continent = 'EU'
                AND type='large_airport'
                ORDER by name asc
                LIMIT 30;"""
    cursor = conn.cursor(dictionary=True)
    cursor.execute(sql)
    result = cursor.fetchall()
    return result}